# Useful miscellaneous functions for analysing pairs

import itertools
import numpy as np
import pandas as pd

def generatePairs_all(proteinSet):
    allPairs = set([frozenset(ele) for ele in list(itertools.combinations(proteinSet, 2))])
    print('The total number of pairs generated by the input protein/gene set: ' + str(len(allPairs)))

    return allPairs

def countMappings(proteinSet, pairsDF, idNames):
    mappings = pd.DataFrame(data={'geneID': proteinSet})
    for protein in list(proteinSet):
        mappings.loc[mappings.geneID==protein, 'numMappings'] = \
            int(len(pairsDF.loc[((pairsDF[idNames[0]]==protein) | (pairsDF[idNames[1]]==protein)), :]))

    return mappings

def splitDF_byDelimiters(pairsDF, fieldName, delimiters):
    print('original dimensions: ' + str(pairsDF.shape))
    for delimiter in delimiters:
        pairsDF = pairsDF.assign(
            dummyCol=pairsDF[fieldName].str.split(delimiter)
        ).explode('dummyCol')
        print('dimensions post changes: ' + str(pairsDF.shape))

    pairsDF.drop(columns=fieldName, inplace=True)
    pairsDF.rename(columns={'dummyCol': fieldName}, inplace=True)

    return pairsDF

def analyzeRibosome_constituenciesAcross_predictions(ribosomalComplex, complexesPredictions):
    #max number of ribosomal proteins in a prediction
    #total number of predictions with ribosomal proteins in membership

    complexesRibosomal_memberCount = []
    for complexSet in complexesPredictions:
        if len(ribosomalComplex.intersection(complexSet)) > 0:
            complexesRibosomal_memberCount.append(len(ribosomalComplex.intersection(complexSet)))

    complexesRibosomal_memberCount = np.array(complexesRibosomal_memberCount)
    print('Complexes featuring ribosomal subunit: ' + str(len(complexesRibosomal_memberCount)))
    print('Maximum number of ribosomal subunits in predictions: ' + str(np.amax(complexesRibosomal_memberCount)))
